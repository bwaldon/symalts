library(tidyverse)
library(bootstrap)
library(brms)
library(jsonlite)
library(viridis)
library(grid)
library(cowplot)
mc.cores = parallel::detectCores()
base = 6
expand = 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_csv("../data/main/data.csv")
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d$primeStrength <- factor(d$primeStrength)
d$primeType = factor(d$primeType)
levels(d$primeType) = c("Some", "Number", "Ad-hoc")
alternative = d %>%
filter(btwncondition == "alternative")
exhclausal = d %>%
filter(btwncondition == "exh-clausal")
exhsubclausal = d %>%
filter(btwncondition == "exh-subclausal")
exhonly= d %>%
filter(btwncondition == "exh-only")
prod_graphs = function(condname) {
if(condname == "Canonical") {
subset <- alternative
} else if (condname == "Exhaustive\n-clausal") {
subset <- exhclausal
} else if (condname == "Exhaustive\n-only") {
subset <- exhonly
} else if (condname == "Exhaustive\n-subclausal") {
subset <- exhsubclausal
}
# RELABELING
levels(subset$primeStrength) <- c("Weak", "Strong", "Alternative", "Baseline")
# MEANS AND CONFINTS BY EXPRESSION + CONDITION
byConditionExpression <- subset %>%
group_by(primeStrength,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
# VISUALIZE - CONDITION x EXPRESSION
base = 6
expand = 3
plot <- ggplot(byConditionExpression, aes(x=primeType, y=Mean, fill = primeStrength)) +
geom_bar(stat="identity",position = "dodge") +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
theme(axis.text.x = element_text(angle = 25, hjust = 1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(fill = "Prime type") +
xlab(element_blank()) +
ylim(0,0.71) +
ggtitle(condname)
if(!(condname == "Canonical")) {
plot <- plot + labs(y = NULL)
} else {
plot <- plot + labs(y = "Proportion of\n'Better Picture?' chosen")
}
return(plot)
}
alt_graph <- prod_graphs("Canonical") + theme(legend.position = "none")
exhonly_graph <- prod_graphs("Exhaustive\n-only") + theme(legend.position = "none")
exhclausal_graph <- prod_graphs("Exhaustive\n-clausal") + theme(legend.position = "none")
exhsubclausal_graph <- prod_graphs("Exhaustive\n-subclausal") + theme(legend.position = "none")
graphs <- plot_grid(alt_graph, exhonly_graph, exhsubclausal_graph, exhclausal_graph,
nrow = 1, align = "hv") + theme(panel.spacing = unit(1,"pt"))
legend <- plot_grid(get_legend(prod_graphs("Canonical") + theme(legend.position = "bottom")))
plot_grid(graphs,legend,nrow=2,rel_heights = c(6,1))
ggsave(paste("selections.pdf",sep=""), width = 8, height = 2.5, units = "in", dpi = 1000)
d$btwncondition = factor(d$btwncondition)
d$btwncondition = factor(d$btwncondition,levels(d$btwncondition)[c(1,3,4,2)])
byConditionType <- d %>%
filter(primeStrength %in% c(0,1,3)) %>%
group_by(btwncondition,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
levels(byConditionType$btwncondition) = c("Canonical","Exhaustive-\nonly","Exhaustive-\nsubclausal","Exhaustive-\nclausal")
ggplot(byConditionType, aes(x=btwncondition, y=Mean, fill = primeType)) +
scale_fill_grey() +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
theme(text = element_text(size = base * expand / 1.25, face = "bold"),
legend.position = "bottom") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Condition", y = "Proportion of \n'Better Picture?'\n chosen", fill = "Expression")
ggsave(paste("btwncond.pdf",sep=""), width = 6, height = 4, units = "in", dpi = 1000)
d$btwncondition = factor(d$btwncondition)
d$btwncondition = factor(d$btwncondition,levels(d$btwncondition)[c(1,3,4,2)])
byConditionType <- d %>%
filter(primeStrength %in% c(0,1,2,3)) %>%
group_by(btwncondition,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
levels(byConditionType$btwncondition) = c("Canonical","Exhaustive-\nonly","Exhaustive-\nsubclausal","Exhaustive-\nclausal")
ggplot(byConditionType, aes(x=btwncondition, y=Mean, fill = primeType)) +
scale_fill_grey() +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
theme(text = element_text(size = base * expand / 1.25, face = "bold"),
legend.position = "bottom") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Condition", y = "Proportion of \n'Better Picture?'\n chosen", fill = "Expression")
byConditionType <- d %>%
filter(primeStrength %in% c(0,1,3)) %>%
group_by(btwncondition,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
levels(byConditionType$btwncondition) = c("Canonical","Exhaustive-\nonly","Exhaustive-\nsubclausal","Exhaustive-\nclausal")
ggplot(byConditionType, aes(x=btwncondition, y=Mean, fill = primeType)) +
scale_fill_grey() +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
theme(text = element_text(size = base * expand / 1.25, face = "bold"),
legend.position = "bottom") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Condition", y = "Proportion of \n'Better Picture?'\n chosen", fill = "Expression")
mc.cores = parallel::detectCores()
base = 6
expand = 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_csv("../data/main/data.csv")
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d$primeStrength <- factor(d$primeStrength)
d$primeType = factor(d$primeType)
levels(d$primeType) = c("Some", "Number", "Ad-hoc")
alternative = d %>%
filter(btwncondition == "alternative")
exhclausal = d %>%
filter(btwncondition == "exh-clausal")
exhsubclausal = d %>%
filter(btwncondition == "exh-subclausal")
exhonly= d %>%
filter(btwncondition == "exh-only")
prod_graphs = function(condname) {
if(condname == "Canonical") {
subset <- alternative
} else if (condname == "Exhaustive\n-clausal") {
subset <- exhclausal
} else if (condname == "Exhaustive\n-only") {
subset <- exhonly
} else if (condname == "Exhaustive\n-subclausal") {
subset <- exhsubclausal
}
# RELABELING
levels(subset$primeStrength) <- c("Weak", "Strong", "Alternative", "Baseline")
# MEANS AND CONFINTS BY EXPRESSION + CONDITION
byConditionExpression <- subset %>%
group_by(primeStrength,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
# VISUALIZE - CONDITION x EXPRESSION
base = 6
expand = 3
plot <- ggplot(byConditionExpression, aes(x=primeType, y=Mean, fill = primeStrength)) +
geom_bar(stat="identity",position = "dodge") +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
theme(axis.text.x = element_text(angle = 25, hjust = 1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(fill = "Prime type") +
xlab(element_blank()) +
ylim(0,0.71) +
ggtitle(condname)
if(!(condname == "Canonical")) {
plot <- plot + labs(y = NULL)
} else {
plot <- plot + labs(y = "Proportion of\n'Better Picture?' chosen")
}
return(plot)
}
alt_graph <- prod_graphs("Canonical") + theme(legend.position = "none")
exhonly_graph <- prod_graphs("Exhaustive\n-only") + theme(legend.position = "none")
exhclausal_graph <- prod_graphs("Exhaustive\n-clausal") + theme(legend.position = "none")
exhsubclausal_graph <- prod_graphs("Exhaustive\n-subclausal") + theme(legend.position = "none")
graphs <- plot_grid(alt_graph, exhonly_graph, exhsubclausal_graph, exhclausal_graph,
nrow = 1, align = "hv") + theme(panel.spacing = unit(1,"pt"))
legend <- plot_grid(get_legend(prod_graphs("Canonical") + theme(legend.position = "bottom")))
plot_grid(graphs,legend,nrow=2,rel_heights = c(6,1))
ggsave(paste("selections.pdf",sep=""), width = 8, height = 2.5, units = "in", dpi = 1000)
rm(list = ls())
library(tidyverse)
library(bootstrap)
library(brms)
library(jsonlite)
library(viridis)
library(grid)
library(cowplot)
mc.cores = parallel::detectCores()
base = 6
expand = 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_csv("../data/main/data.csv")
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d$primeStrength <- factor(d$primeStrength)
d$primeType = factor(d$primeType)
levels(d$primeType) = c("Some", "Number", "Ad-hoc")
alternative = d %>%
filter(btwncondition == "alternative")
exhclausal = d %>%
filter(btwncondition == "exh-clausal")
exhsubclausal = d %>%
filter(btwncondition == "exh-subclausal")
exhonly= d %>%
filter(btwncondition == "exh-only")
prod_graphs = function(condname) {
if(condname == "Canonical") {
subset <- alternative
} else if (condname == "Exhaustive\n-clausal") {
subset <- exhclausal
} else if (condname == "Exhaustive\n-only") {
subset <- exhonly
} else if (condname == "Exhaustive\n-subclausal") {
subset <- exhsubclausal
}
# RELABELING
levels(subset$primeStrength) <- c("Weak", "Strong", "Alternative", "Baseline")
# MEANS AND CONFINTS BY EXPRESSION + CONDITION
byConditionExpression <- subset %>%
group_by(primeStrength,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
# VISUALIZE - CONDITION x EXPRESSION
base = 6
expand = 3
plot <- ggplot(byConditionExpression, aes(x=primeType, y=Mean, fill = primeStrength)) +
geom_bar(stat="identity",position = "dodge") +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
theme(axis.text.x = element_text(angle = 25, hjust = 1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(fill = "Prime type") +
xlab(element_blank()) +
ylim(0,0.71) +
ggtitle(condname)
if(!(condname == "Canonical")) {
plot <- plot + labs(y = NULL)
} else {
plot <- plot + labs(y = "Proportion of\n'Better Picture?' chosen")
}
return(plot)
}
alt_graph <- prod_graphs("Canonical") + theme(legend.position = "none")
exhonly_graph <- prod_graphs("Exhaustive\n-only") + theme(legend.position = "none")
exhclausal_graph <- prod_graphs("Exhaustive\n-clausal") + theme(legend.position = "none")
exhsubclausal_graph <- prod_graphs("Exhaustive\n-subclausal") + theme(legend.position = "none")
graphs <- plot_grid(alt_graph, exhonly_graph, exhsubclausal_graph, exhclausal_graph,
nrow = 1, align = "hv") + theme(panel.spacing = unit(1,"pt"))
legend <- plot_grid(get_legend(prod_graphs("Canonical") + theme(legend.position = "bottom")))
plot_grid(graphs,legend,nrow=2,rel_heights = c(6,1))
ggsave(paste("selections.pdf",sep=""), width = 8, height = 2.5, units = "in", dpi = 1000)
d$btwncondition = factor(d$btwncondition)
d$btwncondition = factor(d$btwncondition,levels(d$btwncondition)[c(1,3,4,2)])
byConditionType <- d %>%
filter(primeStrength %in% c(0,1,2,3)) %>%
group_by(btwncondition,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
levels(byConditionType$btwncondition) = c("Canonical","Exhaustive-\nonly","Exhaustive-\nsubclausal","Exhaustive-\nclausal")
ggplot(byConditionType, aes(x=btwncondition, y=Mean, fill = primeType)) +
scale_fill_grey() +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
theme(text = element_text(size = base * expand / 1.25, face = "bold"),
legend.position = "bottom") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Condition", y = "Proportion of \n'Better Picture?'\n chosen", fill = "Expression")
ggsave(paste("btwncond.pdf",sep=""), width = 6, height = 4, units = "in", dpi = 1000)
library(tidyverse)
library(bootstrap)
library(brms)
library(jsonlite)
library(viridis)
library(grid)
library(cowplot)
mc.cores = parallel::detectCores()
base = 6
expand = 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_csv("../data/main/data.csv")
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d$primeStrength <- factor(d$primeStrength)
d$primeType = factor(d$primeType)
levels(d$primeType) = c("Some", "Number", "Ad-hoc")
alternative = d %>%
filter(btwncondition == "alternative")
exhclausal = d %>%
filter(btwncondition == "exh-clausal")
exhsubclausal = d %>%
filter(btwncondition == "exh-subclausal")
exhonly= d %>%
filter(btwncondition == "exh-only")
prod_graphs = function(condname) {
if(condname == "Canonical") {
subset <- alternative
} else if (condname == "Exhaustive\n-clausal") {
subset <- exhclausal
} else if (condname == "Exhaustive\n-only") {
subset <- exhonly
} else if (condname == "Exhaustive\n-subclausal") {
subset <- exhsubclausal
}
# RELABELING
levels(subset$primeStrength) <- c("Weak", "Strong", "Alternative", "Baseline")
# MEANS AND CONFINTS BY EXPRESSION + CONDITION
byConditionExpression <- subset %>%
group_by(primeStrength,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
# VISUALIZE - CONDITION x EXPRESSION
base = 6
expand = 3
plot <- ggplot(byConditionExpression, aes(x=primeType, y=Mean, fill = primeStrength)) +
geom_bar(stat="identity",position = "dodge") +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
theme(axis.text.x = element_text(angle = 25, hjust = 1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(fill = "Prime type") +
xlab(element_blank()) +
ylim(0,0.71) +
ggtitle(condname)
if(!(condname == "Canonical")) {
plot <- plot + labs(y = NULL)
} else {
plot <- plot + labs(y = "Proportion of\n'Better Picture?' chosen")
}
return(plot)
}
alt_graph <- prod_graphs("Canonical") + theme(legend.position = "none")
exhonly_graph <- prod_graphs("Exhaustive\n-only") + theme(legend.position = "none")
exhclausal_graph <- prod_graphs("Exhaustive\n-clausal") + theme(legend.position = "none")
exhsubclausal_graph <- prod_graphs("Exhaustive\n-subclausal") + theme(legend.position = "none")
graphs <- plot_grid(alt_graph, exhonly_graph, exhsubclausal_graph, exhclausal_graph,
nrow = 1, align = "hv") + theme(panel.spacing = unit(1,"pt"))
legend <- plot_grid(get_legend(prod_graphs("Canonical") + theme(legend.position = "bottom")))
plot_grid(graphs,legend,nrow=2,rel_heights = c(6,1))
ggsave(paste("selections.pdf",sep=""), width = 8, height = 2.5, units = "in", dpi = 1000)
d$btwncondition = factor(d$btwncondition)
d$btwncondition = factor(d$btwncondition,levels(d$btwncondition)[c(1,3,4,2)])
byConditionType <- d %>%
group_by(btwncondition,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
levels(byConditionType$btwncondition) = c("Canonical","Exhaustive-\nonly","Exhaustive-\nsubclausal","Exhaustive-\nclausal")
ggplot(byConditionType, aes(x=btwncondition, y=Mean, fill = primeType)) +
scale_fill_grey() +
theme_bw() +
geom_bar(stat="identity",position = "dodge") +
theme(text = element_text(size = base * expand / 1.25, face = "bold"),
legend.position = "bottom") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Condition", y = "Proportion of \n'Better Picture?'\n chosen", fill = "Expression")
ggsave(paste("btwncond.pdf",sep=""), width = 6, height = 4, units = "in", dpi = 1000)
rt_mean = mean(d$response_rt)
rm(list = ls())
library(tidyverse)
library(bootstrap)
library(brms)
library(jsonlite)
library(viridis)
library(grid)
library(cowplot)
mc.cores = parallel::detectCores()
base = 6
expand = 3
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d <- read_csv("../data/main/data.csv")
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
d$primeStrength <- factor(d$primeStrength)
d$primeType = factor(d$primeType)
levels(d$primeType) = c("Some", "Number", "Ad-hoc")
alternative = d %>%
filter(btwncondition == "alternative")
exhclausal = d %>%
filter(btwncondition == "exh-clausal")
exhsubclausal = d %>%
filter(btwncondition == "exh-subclausal")
exhonly= d %>%
filter(btwncondition == "exh-only")
prod_graphs = function(condname) {
if(condname == "Canonical") {
subset <- alternative
} else if (condname == "Exhaustive\n-clausal") {
subset <- exhclausal
} else if (condname == "Exhaustive\n-only") {
subset <- exhonly
} else if (condname == "Exhaustive\n-subclausal") {
subset <- exhsubclausal
}
# RELABELING
levels(subset$primeStrength) <- c("Weak", "Strong", "Alternative", "Baseline")
# MEANS AND CONFINTS BY EXPRESSION + CONDITION
byConditionExpression <- subset %>%
group_by(primeStrength,primeType) %>%
summarize(Mean = mean(responseChoice),
CILow =ci.low(responseChoice),
CIHigh =ci.high(responseChoice)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
# VISUALIZE - CONDITION x EXPRESSION
base = 6
expand = 3
plot <- ggplot(byConditionExpression, aes(x=primeType, y=Mean, fill = primeStrength)) +
geom_bar(stat="identity",position = "dodge") +
theme_bw() +
scale_fill_viridis(discrete = TRUE) +
theme(text = element_text(size = base * expand / 2, face = "bold")) +
theme(axis.text.x = element_text(angle = 25, hjust = 1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(fill = "Prime type") +
xlab(element_blank()) +
ylim(0,0.71) +
ggtitle(condname)
if(!(condname == "Canonical")) {
plot <- plot + labs(y = NULL)
} else {
plot <- plot + labs(y = "Proportion of\n'Better Picture?' chosen")
}
return(plot)
}
alt_graph <- prod_graphs("Canonical") + theme(legend.position = "none")
exhonly_graph <- prod_graphs("Exhaustive\n-only") + theme(legend.position = "none")
exhclausal_graph <- prod_graphs("Exhaustive\n-clausal") + theme(legend.position = "none")
exhsubclausal_graph <- prod_graphs("Exhaustive\n-subclausal") + theme(legend.position = "none")
graphs <- plot_grid(alt_graph, exhonly_graph, exhsubclausal_graph, exhclausal_graph,
nrow = 1, align = "hv") + theme(panel.spacing = unit(1,"pt"))
legend <- plot_grid(get_legend(prod_graphs("Canonical") + theme(legend.position = "bottom")))
plot_grid(graphs,legend,nrow=2,rel_heights = c(6,1))
ggsave(paste("selections.pdf",sep=""), width = 8, height = 2.5, units = "in", dpi = 1000)
d$btwncondition = factor(d$btwncondition)
levels(d$btwncondition)
d$btwncondition = factor(d$btwncondition,levels(d$btwncondition)[c(1,3,4,2)])
levels(d$btwncondition)
